---
layout: post
title: Android 编译常用命令
categories: Android底层开发
tags: [Android编译]
date: 2015-11-05 13:20:55
---

编译APK,大多是都是利用eclipse或者Android studio来做的,利用IDE来编译,屏蔽了许多细节.

<!--more-->


### aapt 命令

作用1: 列出apk包的内容

```bash
 aapt l[ist] [-v] [-a] file.{zip,jar,apk}
```
-v 以table形式列出来

-a 详细列出内容

作用2: 查看apk的一些信息

```bash
aapt d[ump] [--values] WHAT file.{apk} [asset [asset ...]]
```
value:

```bash
   strings          Print the contents of the resource table string pool in the APK.
   badging          Print the label and icon for the app declared in APK.
   permissions      Print the permissions from the APK.
   resources        Print the resource table from the APK.
   configurations   Print the configurations in the APK.
   xmltree          Print the compiled xmls in the given assets.
   xmlstrings       Print the strings of the given compiled xml assets.
```

例如查看apk中申请的权限:

```bash
aapt d permissions xxx.apk
```

作用3: 编译Android资源

```bash
 aapt p[ackage] [-d][-f][-m][-u][-v][-x][-z][-M AndroidManifest.xml] \
        [-0 extension [-0 extension ...]] [-g tolerance] [-j jarfile] \
        [--debug-mode] [--min-sdk-version VAL] [--target-sdk-version VAL] \
        [--app-version VAL] [--app-version-name TEXT] [--custom-package VAL] \
        [--rename-manifest-package PACKAGE] \
        [--rename-instrumentation-target-package PACKAGE] \
        [--utf16] [--auto-add-overlay] \
        [--max-res-version VAL] \
        [-I base-package [-I base-package ...]] \
        [-A asset-source-dir]  [-G class-list-file] [-P public-definitions-file] \
        [-S resource-sources [-S resource-sources ...]] \
        [-F apk-file] [-J R-file-dir] \
        [--product product1,product2,...] \
        [-c CONFIGS] [--preferred-configurations CONFIGS] \
        [--split CONFIGS [--split CONFIGS]] \
        [--feature-of package [--feature-after package]] \
        [raw-files-dir [raw-files-dir] ...] \
        [--output-text-symbols DIR]
```

-f 如果编译出来的文件已经存在，强制覆盖。

-m 使生成的包的目录放在-J参数指定的目录。

-J 指定生成的R.java的输出目录

-S res文件夹路径

-A assert文件夹的路径

-M AndroidManifest.xml的路径

-I 某个版本平台的android.jar的路径

-F 具体指定apk文件的输出

例如:

1). 将工程的资源编译R.java文件
```
aapt package -m -J <R.java目录> -S <res目录> -I <android.jar目录>  -M <AndroidManifest.xml目录>
```bash

2). 将工程的资源编译编译到一个包里

```bash
aapt package -f  -S <res目录> -I <android.jar目录> -A<assert目录>  -M <AndroidManifest.xml目录> -F <输出的包目录>
```

其他:

1. 打包好的apk中移除文件

```bash
aapt r[emove] [-v] file.{zip,jar,apk} file1 [file2 ...]
```
例如：aapt r <你的apk文件> AndroidManifest.xml， 这个就是将apk中的AndroidManifest移除掉

2. 添加文件到打包好的apk中

```
 aapt a[dd] [-v] file.{zip,jar,apk} file1 [file2 ...]
```

例如：aapt a <你的apk文件> <要添加的文件路径>， 这个就是将文件添加到打包好的apk文件中

3.  显示aapt的版本

```bash
aapt v[ersion]
```

### aidl命令


使用aidl命令将.aidl文件转换为.java文件.

```bash
INPUT required
usage: aidl OPTIONS INPUT [OUTPUT]
       aidl --preprocess OUTPUT INPUT...

OPTIONS:
   -I<DIR>    search path for import statements.
   -d<FILE>   generate dependency file.
   -a         generate dependency file next to the output file with the name based on the input file.
   -p<FILE>   file created by --preprocess to import.
   -o<FOLDER> base output folder for generated files.
   -b         fail when trying to compile a parcelable.

INPUT:
   An aidl interface file.

OUTPUT:
   The generated interface files.
   If omitted and the -o option is not used, the input filename is used, with the .aidl extension changed to a .java extension.
   If the -o option is used, the generated files will be placed in the base output folder, under their package folder
```

OPTIONS中“-I”是必选而非可选

```bash
aidl -I<DIR> ,aidl<aidl文件路径>
```


### javac 命令

javac 将.java文件转换为.class文件


### dx命令

将字节码转换为dex文件

```
dx --dex --output=class.dex xxx.class
```


