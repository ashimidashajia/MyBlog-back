---
layout: post
title: Android6.0之Intent使用与源码分析
categories: Android底层开发
tags: [Android核心服务]
date: 2016-07-06 11:28:58

---

 在一个Android应用中，主要是由四种组件组成的。而这四种组件是独立的，它们之间可以互相调用，协调工作，最终组成一个真正的Android应用。在这些组件之间的通讯中，主要是由Intent协助完成的。鉴于Intent的特殊地位，有必要首先分析其机制，这样有利于后续分析AMS如何管理四大组件。


<!--more-->

### intent概述

 Intent负责对应用中一次操作的动作、动作涉及的数据、附加数据进行描述。Android则根据此Intent的描述，负责找到对应的组件，将 Intent传递给调用的组件，并完成组件的调用。因此，Intent在这里起着一个媒体中介的作用，专门提供组件互相调用的相关信息，实现调用者与被调用者之间的解耦。

例如，在一个联系人维护的应用中，当我们在一个联系人列表屏幕(假设对应的Activity为listActivity)上，点击某个联系人后，希望能够跳出此联系人的详细信息屏幕(假设对应的Activity为detailActivity)为了实现这个目的，listActivity需要构造一个 Intent，这个Intent用于告诉系统，我们要做“查看”动作，此动作对应的查看对象是“某联系人”，然后调用startActivity (Intent intent)，将构造的Intent传入，系统会根据此Intent中的描述，到ManiFest中找到满足此Intent要求的Activity，系统会调用找到的 Activity，即为detailActivity，最终传入Intent，detailActivity则会根据此Intent中的描述，执行相应的操作。


Android 应用程序中有三大核心组件： Activity, Service, BroadcastReceiver 都是通过被称之为意图的消息运行。

1. 对于Activity

 传递一个Intent对象到 Context.startActivity(intent) 或者 Activity.startActivity ForResult(int) 去运行一个Activity（可以在通过此方式启动后的Activity中调用 Activity.setResult() 设置结果参数，该参数将会在启动当前activity的activity中被接收---可以通过onActivityResult(int requestCode, int resultCode, Intent data) 接收。

2. 对于Service

  传递一个Intent对象到 Context.startService(intent) 去启动一个service 或者 传递一个新的指令到正在运行的service中。另外，还可以通过 Context.bindService(intent) 去绑定一个Service。（在调用组件和目标Service 建立一个连接。

3. 对于BroadcastReceiver

  传递一个Intent对象到 任何一个broadcast methods （如： Context.sendBroadcast() , Context.sendOrderedBroadcast(),Context.sendStickyBroadcast() ） 该intent将被传递给所有已经被注册的broadcast receiver中。

在以上的三种情况下，当Intent被传递出后，Android系统会找到适合的activity，service,或者是多个broadcast receiver去响应这个intent。,这三种情况不会存在重叠的部分，它们相互独立，互不干扰。（调用Context.startActivity()后 intent只会被相应的activity接收到.


### intent类

一个Intent对象是一个信息包。它包含了要接收此Intent的组件需要的信息（例如需要的动作和动作需要的信息）和 android 系统需要的信息（要处理此Intent的组件的类别和怎样启动它）

总的来说，Intent Object 主要包括以下信息。

```shell
component：目标组件的类名；

action：所要执行的动作；（例如：ACTION_CALL创建打电话Activity；ACTION_BATTERY_LOW 发出广播警告电池电量低，）

data: 要使用的数据（Uri）；

category：关于目标组件的信息；

extras ：这是Bundle数据。

flags：标志

```
#### component

处理Intent 的组件名称。此字段是一个 ComponentName object---它是目标的组件的完整限定名（包名+类名） 例如： “com.android.test.TestActivity”.

ComponentName类定义节选如下，主要有两个属性成员，其余都是方法。
```java
public final class ComponentName implements Parcelable, Cloneable, Comparable<ComponentName> {
    private final String mPackage;
    private final String mClass;
...........
```

该字段是可选的。如果设置了此字段，那么 Intent Object 将会被传递到这个组件名所对应的类的实例中。 如果没有设置，Android 会用 Intent object 中的其它信息去定位到一个合适的目标组件中。这个过程称为intent解析。

设置Component name 可以通过 setComponent() , setClass() 或者 setClassName()进行设置。 可以通过 getComponent() 进行读取.

```java
public Intent setComponent(ComponentName component) {
        mComponent = component;
        return this;
    }
public Intent setClass(Context packageContext, Class<?> cls) {
       mComponent = new ComponentName(packageContext, cls);
       return this;
   }
public Intent setClassName(Context packageContext, String className) {
   mComponent = new ComponentName(packageContext, className);
   return this;
}
public Intent setClassName(String packageName, String className) {
      mComponent = new ComponentName(packageName, className);
      return this;
}
```
#### action

一个字符串，代表要执行的动作。 -- 或者，对于 broadcase intents 来说，表示正在发生，并且被报告的动作。Intent 类中 定义了许多动作常量。

![][1]

也可以定义自己的 action strings 来激活组件。自定义的action 应该包含包名作为前缀： 例如"com.example.project.SHOW_COLOR".

Action 很大程度上决定 Intent余下部分的结构。 ---- 特别是：data 和 extras 两个字段。就像一个方法的方法名通常决定了方法的参数和返回值。 基于这个原因，应该给action 命名一个尽可能明确的名字。 可以通过 setAction() 设置action，通过 getAction() 进行获取.

#### data和type

Data属性有两部分构成： 数据URI 和 数据MIME type 。

action的定义往往决定了data该如何定义。

例如： 如果 一个Intent的 action 为 ACTION_EDIT 那么它对应的data 应该包含待编辑的数据的URI . 如果一个action 为：ACTION_CALL ，那么data 应该为 tel: 电话号码的URI . 类似的， 如果action 为 ACTION_VIEW 那么data 应该为： http: URI ， 接收到的activity 将会下载并显示相应的数据。

当一个Intent 和 有能力处理此Intent的组件进行匹配时， 除了 data的URI以外，了解data的类型（MIME Type）也很重要。 例如： 一个显示图片的组件 不应该去播放声音文件。

许多情况下，data type 可以从URI中推测出。 尤其是： URI = content: URIs这时候数据通常是位于本设备上而且是由某个content provider来控制的。即便如此，我们仍然可以明确的在 Intent object上设置一个 data type. setData() 方法只能设置URI, setType() 设置MIME type, setDataAndType() 可以对二者都进行设置， 获取URI 和 data type 可分别调用 getData() 和 getType() 方法。


解析类型最好使用下面的方法

```java
public String resolveType(ContentResolver resolver) {
       if (mType != null) {
           return mType;
       }
       if (mData != null) {
           if ("content".equals(mData.getScheme())) {
               return resolver.getType(mData);
           }
       }
       return null;
   }
```

如果用Intent.setType(String)显式的设置了type，那么返回该type；这个时候就等同于Intent.getType()方法。

否则，会从intent的uri中，也就是Intent.setData(Uri)设置进来的uri来解析，而且必须schema为content才会有type，其余情况都会返回空。

因为content会有非常多的类型，而像tel,mailto,smsto,imto等，类型都非常单一，一般IntentFilter中只写这些schema就好了。

如果是content类型，一般IntentFilter中写action为Intent.ACTION_VIEW，然后写几组mimeType。

如联系人列表中点击联系人进入联系人详情和联系人详情点击邮政地址都是Intent.ACTION_VIEW和一个schema为content的Uri，只是mimeType不一样，点击邮政地址进入地图查看位置，发出的mimeType就必须用resolveType()解析出来，用getType()得到的会是null.

综上所述，从intent中取得mimeType，最好的方法就是用resolveType()。

#### Category

一个字符串， 包含了处理该Intent的组件的种类信息, 起着对action的补充说明作用.

 一个Intent对象可以有任意多个 category。和action 一样， 在Intent class 中也定义了几个 category 常量. 如下：

![][2]

addCategory() 添加一个 category

removeCategory() 删除一个 category

getCategorys() 获取所有的category

#### Extras

为键-值对形式的附加信息. 例如ACTION_TIMEZONE_CHANGED的intent有一个"time-zone"附加信息来指明新的时区, 而ACTION_HEADSET_PLUG有一个"state"附加信息来指示耳机是被插入还是被拔出.

intent对象有一系列put...()和set...()方法来设定和获取附加信息. 这些方法和Bundle对象很像. 事实上附加信息可以使用putExtras()和getExtras()作为Bundle来读和写.

#### Flags

有各种各样的标志，许多指示Android系统如何去启动一个活动（例如，活动应该属于那个任务）和启动之后如何对待它（例如，它是否属于最近的活动列表）。所有这些标志都定义在Intent类中。

### Intent解析

1. 显示Intent

显式的设定目标组件的component名称。不过有时开发者不知道其他应用的component名称。显式方式常用于自己应用内部的消息传递，比如应用中一个activity启动一个相关的service或者启动一个姐妹activity；

2. 隐式Intent

component名称为空的情况。这种方式往往用于激活其他应用中的组件。

android投递一个显式的intent，只需找到对应名称的组件即可。

隐式的intent需要用到不同的策略。android需要找到处理这个intent的最合适组件（集合）。要通过intent filter，比较intent对象和组件关联结构。filter根据组件的能力决定他们能处理哪些intent。android系统打开合适的组件处理相应的隐式intent。

如果组件不包含任何intent filter，那只能接收显式的intent。带filter的组件既可接收隐式intent也可接收显式的。


Intent有三个方面可用于intent filter：

1. action

2. data，包括URI部分和数据类型部分

3. category

extra和flag在这方面不起作用。

### intentfilter

为了能支持隐式intent，activity、service和broadcast receiver会包含1到多个intent filter。每个intent filter描述组件的可接收一组intent的能力。在intent filter中，说明了可接受的类型，以及不想要的intent。

隐式的intent要想投递到一个组件，只需通过组件的一个filter即可。

组件把filter分成多个，是为了针对具体不同的任务。

 一个intent filter是一个IntentFilter类的实例。但是，android系统必须在组件未启动的情况下就知道它的能力，因此intent filter一般不会在java代码中设置，而是在应用的manifest文件中作为<intent-filter>元素的方式声明。

 一个例外是，为broadcast receiver注册动态的filter，可以调用Context.registerReceiver()方法，通过直接实例化IntentFilter对象创建。

filter有三个平等的部分：action、data和category。隐式intent将测试这三个部分。一个intent要想投递到一个组件，那么这三个测试都要通过才行。当然如果组件有多个intent filter，可能一个intent没有通过，但是通过了另外的一个，这样也可以把intent投递到组件。

如果一个Intent 可以通过多个activity或者filter的filter，那么用户将会被询问需要激活哪个组件。 如果一个都没有的话，将会抛出异常。


#### action测试

```xml
<intent-filter . . . >  
    <action android:name="com.example.project.SHOW_CURRENT" />  
    <action android:name="com.example.project.SHOW_RECENT" />  
    <action android:name="com.example.project.SHOW_PENDING" />  
    . . .  
</intent-filter>
```

一个intent对象只能命名一个单一的action，一个过滤器则可以列出多个action。这个列表也可以是空的， 一个过滤器必须包含一个 <action> element ,否则它将阻止所有的intents要通过这个测试，在intent被指定的action必须匹配在过滤器中所列的action的其中之一。如果一个intent对象或者过滤器没有指定action。 结果如下 :

如果一个filter 没有指定任何action ,那么则没有任何intent会被匹配(显示intent除外)。所以，所有的intent将不会通过此测试。

另一方面，如果一个intent对象没有指定任何action，那么将自动通过此测试——只要这个过滤器中有至少一个action.

####  Category测试

```xml
<intent-filter . . . >   
<category android:name="android.intent.category.DEFAULT" />   
<category android:name="android.intent.category.BROWSABLE" />   
    . . .   
</intent-filter>  
```
要通过category测试， Intent对象中包含的每个category必须匹配filter中的一个。Filter可以列出额外的category，但是不能漏掉 intent 对象包含的任意一个category。

原则上，一个没有任何categorys的 Intent object 将总是通过此测试。大多数情况下是正确的。然而，也有例外，android对待所有传入 startActivity()中的隐式视图，都认为它们至少包含了一个 category --- "android.intent.category.DEFAULT".因此，希望接收这些隐式意图的activities必须在在它们的 intent filters 中包含”android.intent.category.DEFAULT” .

对于含"android.intent.action.MAIN" and "android.intent.category.LAUNCHER"的filter 则是例外。因为它们标记了此activity开启了一个新的task 和 将出现在 launcher screen。它们也可以包含“com.intent.category.DEFAULT”,但没必要.一般的，app的主Activity都具备这两个属性。

#### data测试

类似于action, categories, data也是 intent filter 中的一个子节点， 可以设置多个 data节点，也可以一个不设置。

```xml
<intent-filter . . . >   
<data android:mimeType="video/mpeg" android:scheme="http" . . . />   
<data android:mimeType="audio/mpeg" android:scheme="http" . . . />   
    . . .   
</intent-filter>
```

每个<data> 元素可以指定一个 URI 和 一个 data type (MIME media type) . URI 有以下几个属性组成 :

```shell
schema,host,port,path

Schema://host:port/path
```
例如：

```shell
content://com.example.project:200/folder/subfolder/etc
```
在上例中

schema:content

host: com.example.project

Port: 200

Path: folder/subfolder/etc

主机 host 和 port 一起组成了URI authority，如果没有指定 host,那么port将被忽略。

 <data>节点中的属性都是可选的，但它们并非相互独立。要使一个authority 有意义，必须要指定 scheme 。 要是 path 有意义， scheme 和 authority（host:port） 必须指定。


当Intent对象中的URI 和 intent filter 进行比较时，它只会进行部门比较。 例如： 如果一个 filter 只指定了一个scheme , 那么所有包含该scheme的URI都会匹配。 如果一个filter只指定了 scheme 和 authority ，没有path, 那么所有包含此scheme 和 authority 将会匹配。如果一个filter指定了一个scheme,authority, 和一个path, 那么只有包含同样的 scheme,authoritym,path会匹配。 但是，对于path，我们可以使用通配符进行部门匹配。

<data>节点的 type 属性指定了 data的MIME type。 它比在filter中的URI 更常见 intent对象和filter都可以使用 “*” 通配符作为子类型 – 例如： "text/×" ， "audio/×" 表示所有子类型都匹配。

data test 会将 intent对象中的URI 和 data type 与filter指定的都进行比较。 规则如下：


a) 如果一个intent 没有指定URI 和 data type , 那么如果filter中也是同样，则通过测试。

b) 如果一个intent 有URI 但是没有 data type(或者是data type不能从uri中推断出来 ) 只能通过这样的filter: uri匹配, 并且不指定类型. 这种情况限于类似mailto:和tel:这样的不指定实际数据的uri.

c) 如果一个intent 包含 data type 但是没有 uri ,那么 filter中列出相同的data type 并且没有指定URI 则通过测试。

d) 如果一个intent包含一个URI 和data type （或者data type 可以从URI中推断出来），那么filter列出的有相同data type ，intent对象的uri要么和filter中的uri匹配，要么intent的uri为 content: or file: 并且filter不指定uri。

如果一个Intent 可以通过多个activity或者filter的filter，那么用户将会被询问需要激活哪个组件。 如果一个都没有的话，将会抛出异常。


Intents对照着Intent过滤器匹配，不仅去发现一个目标组件去激活，而且去发现设备上的组件的其他信息。例如，Android系统填充应用程序启动列表，最高层屏幕显示用户能够启动的应用程序：是通过查找所有的包含指定了"android.intent.action.MAIN"的动作和"android.intent.category.LAUNCHER"种类的过滤器的Activity，然后在启动列表中显示这些Activity的图标和标签。类似的，它通过查找有"android.intent.category.HOME"过滤器的Activity发掘主菜单。


### intent不能直接传递对象而要通过序列化机制间接传递对象

Intent在启动其他组件时，会离开当前应用程序进程，进入AMS进程，这也就意味着，Intent所携带的数据要能够在不同进程间传输。首先我们知道，Android是基于Linux系统，不同进程之间的java对象是无法传输，所以我们此处要对对象进行序列化，从而实现对象在 应用程序进程 和 AMS进程之间传输。

在不同进程之间，常规数据类型可以直接传递，如整数，以传递字符串为例，要从A进程传递到B进程，只需在B进程的内存区开辟一样大小的空间，然后复制过去即可。
但是，对象却不能直接跨进程传递。即使成员变量值能传递过去，成员方法是无法传递过去的，此时如果B进程要调用成员方法则出错。

具体传递对象的方法：

1. 在进程Ａ中把类中的非默认值的属性和类的唯一标志打成包（这就叫序列化）；

2. 把这个包传递到进程Ｂ；

3. 进程Ｂ接收到包后，根据类的唯一标志把类创建出来（java反射机制）；

4. 然后把传来的属性更新到类对象中。

这样进程Ａ和进程Ｂ中就包含了两个完全一样的类对象。


Intent如何实现对象传递？

Parcelable接口：这是Android提供的用作封装数据的容器，封装后的数据可以通过Intent或IPC来传递。只有基本类型和实现了Parcelable接口的类才能被放入Parcel中。


### intent类型解析源码分析


一个指定了data但没有指定type的intent也是有可能推测出其type的，这个方法是intent类中的resolveTypeIfNeed()方法。

源码路径：

```shell
 Android-6/frameworks/base/core/java/android/content/Intent.java
```

```java
public String resolveTypeIfNeeded(ContentResolver resolver) {
    // 如果指定了组件名字，也就说明这是一个显示intent了，那也就没必要关心type了
    if (mComponent != null) {
        return mType;
    }
    // 接下来就是解析隐式intent了
    return resolveType(resolver);
}
public String resolveType(ContentResolver resolver) {
    // 如果指定了type，那就返回显示指定的type
    if (mType != null) {
        return mType;
    }
    // 没有指明type，但有data的话，尝试从data推测除type
    if (mData != null) {
      // 说明只有data中的Scheme为content的时候才依据data去推测type，否则返回null
        if ("content".equals(mData.getScheme())) {
          // 调用ContentResolver类中的getType继续解析type
            return resolver.getType(mData);
        }
    }
    return null;
}
```
resolver.getType()方法返回content url的MIME TYPE.

源码路径：

```shell
 Android-6/frameworks/base/core/java/android/content/ContentResolver.java
```
```java
public final @Nullable String getType(@NonNull Uri url) {
    Preconditions.checkNotNull(url, "url");

    // 看看是否能找到一个与url匹配的provider，存在的话使用这个provider中的getType来解析
    IContentProvider provider = acquireExistingProvider(url);
    if (provider != null) {
        try {
            return provider.getType(url);
        } catch (RemoteException e) {
            return null;
        } catch (java.lang.Exception e) {
            Log.w(TAG, "Failed to get type for: " + url + " (" + e.getMessage() + ")");
            return null;
        } finally {
            releaseProvider(provider);
        }
    }

    if (!SCHEME_CONTENT.equals(url.getScheme())) {
        return null;
    }

    // 借助AMS来解析
    try {
        String type = ActivityManagerNative.getDefault().getProviderMimeType(
                ContentProvider.getUriWithoutUserId(url), resolveUserId(url));
        return type;
    } catch (RemoteException e) {
        // Arbitrary and not worth documenting, as Activity
        // Manager will kill this process shortly anyway.
        return null;
    } catch (java.lang.Exception e) {
        Log.w(TAG, "Failed to get type for: " + url + " (" + e.getMessage() + ")");
        return null;
    }
}
```
这里说明了一个很重要的问题：每个provider在实现的时候，必须实现getType()，否则当获取type时，会返回null.

没找到这样一个provider的时候，会通过AMS分析type，AMS最后也会通过PMS来解析。

PackageManager有一组query…()方法返回能够接收特定intent的所有组件，一组resolve…()方法决定最适合的组件响应intent。

例如，queryIntentActivities()返回一组能够给执行指定的intent参数的所有activity，类似的queryIntentServices()返回一组服务。这两个方法都不激活组件，它们仅列出所有能够响应的组件。对应广播接收者也有类似的方法——queryBroadcastReceivers()。


[1]: http://7xj6ce.com1.z0.glb.clouddn.com/AMS-6.gif
[2]: http://7xj6ce.com1.z0.glb.clouddn.com/AMS-7.gif
