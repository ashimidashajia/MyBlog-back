---
layout: post
title: Android 5.1 SEAndroid分析之安全上下文语法篇
categories: Android底层开发
tags: [Android核心服务]
date: 2015-09-29 14:02:40
---

前面文章最后介绍了如何查看安全上下文.现在介绍下安全上下文的含义和规则.

上下文是一个有固定格式的字符串:

```bash
username:role:type:an optional MLS security range
```
如u:object_r:rootfs:s0就是一个安全上下文.在SEAndroid中最重要的是type字段的值,username和MLS字段通常都为u和s0.role也就两个角色罢了.所以说SEAndroid是基于类型控制的MAC机制.意味着SEAndroid的策略文件相比较SELinux来说,是比较简单的.

与SEAndroid相关的核心源码在

```bash
Android源码/external/sepolicy 里面是Android系统默认的策略文件,厂商可以在device目录中添加和覆盖策略文件
Android源码/external/libselinux 里面是SEAndroid核心库
```
<!--more-->

### role角色

为了实现基于角色的访问控制,user可以被分配一个或者多个角色,不同的角色有不同的权限,每个角色可以被分配若干domain types.

Android源码/external/sepolicy/roles:

```bash
role r;
role r types domain;  
```

roles文件记录了当前系统定义了哪些角色,可见Android 5.1中仍然只是添加了一个角色r,r角色和domain属性关联,domain属性代表主体进程.

当执行
```bash
ps -Z
```
结果如下:

![][1]

这也验证了角色r适合进程相关联的了.


除了角色r外,SElinux还有一个内置的角色object_r,这个角色是和资源关联的.

当执行
```bash
ll -Z
```
结果如下

![][2]

也验证了object_r角色是和资源,也就是客体相关联的了.

基于角色的访问控制在SEAndroid中不是重头戏.

#### Type类型

定义主体和客体所属的类型.

基本语法:

```bash
type 类型名称 [,属性]
```
提到type,就不得不提属性了:

Android源码/external/sepolicy/attributes

```bash
######################################
# Attribute declarations
#

# All types used for devices.
attribute dev_type;

# All types used for processes.
attribute domain;

# All types used for filesystems.
attribute fs_type;

# All types used for context= mounts.
attribute contextmount_type;

. . . . . 
```
上述文件中定义了SEAndroid中用到的所有属性,属性由attribute关键字声明，属性其实是一个特殊的type，可以把属性看成是type的集合，为属性设置的策略，适用于所有与该属性相关联的type.看到了吧,domain也是在这里定义的,而且注释也说的很清楚了,是用于进程的.fs_type表示文件,通常用于表示客体的类型,

例如

```bash
type adbd, domain;
```
定义了adbd类型,隶属于domain.

```bash
type rootfs, fs_type;
```
定义rootfs类型,隶属于fs_type.

注意：一个type可以关联多个attribute；

<font color="#ff5588">attribute和type的关系</font>

a）实际上，type和attribute位于同一个命名空间，即不能用type命令和attribute命令定义相同名字的东西；

b）其实，attribute真正的意思应该是类似typegroup这样的概念。比如将type A和attributeB关联起来，就是说type A属于attributeB中的一员；

使用attribute有什么好处呢？一般而言，系统会定义数十或数百个type，每个type都需要通过allow语句来设置相应的权限，这样我们的安全策略文件编写起来就会非常麻烦。有了attribute之后呢，我们可以将这些type与某个attribute关联起来，把这些type共有的权限，通过一条allow语句来设置.

```bash
 # 定义两个type，分别是t_a和t_b，它们都需要设置对t_c类型文件的读操作；

  # 首先，把t_a和t_b关联到attr_test

  type t_a, attr_test;

  type t_b, attr_test;

  # 通过一条allow语句为attr_test设置对t_c类型文件的读权限

  allow attr_test t_c:file read;

```
现在t_a和t_b域的进程拥有了对t_c类型文件的读权限.

### Object Class 和 permissive

#### permissive

在早起Android版本源码中你可能会看到某些类型定义的时候,下面紧跟着permissive:
```bash
type adbd, domain;
permissive adbd;
```
意味着此时adbd运行在 permissive状态.就算是Android系统本身工作在enforcing状态,adbd违反了策略文件中定义的访问规则,照样可以执行.

#### object class

客体分了很多种类,比如文件,文件夹,连接文件,驱动设备文件等等.

Android源码/external/sepolicy/security_classes:

```bash
class security
class process
class system
class capability

# file-related classes
class filesystem
class file
class dir
class fd
class lnk_file
class chr_file
class blk_file
class sock_file
class fifo_file

. . . . .
```
security_classes文件中记录了当前SEAndroid所有的obejct class.

与security_classes文件相对应的是下面的文件,其中记录做object class 所具备的相关permissions权限.

Android源码/external/sepolicy/access_vectors:

```bash
#
# Define a common prefix for file access vectors.
#

common file
{
    ioctl
    read
    write
    create
    getattr
    setattr
    lock
    relabelfrom
    relabelto
    append
    unlink
    link
    rename
    execute
    swapon
    quotaon
    mounton
}
. . . . .
```
只要是security_classes文件中有的object class,都会在access_vectors有其对应的操作许可,即可以执行哪些操作.

Object classes 和他们分配的 permissions是由kernel内部LSM中的object manager来决定的,所以在不修改内核LSM模块源码的情况下,不要尝试修改上面的两个文件中的内容.

### 主体对客体的访问规则

除了定义主体和客体的安全上下文外,还需要定义主体对客体的访问规则,这也是所有策略文件中,数量最大的部分.

定义访问规则,使用allow语句,其语法如下所示:

![][3]

这里说明一个隐含规则,有时候把主体进程用doamin标示,而type仅仅标示客体.

这里列举一个例子来解释上述语法中各个字段的含义.

Android源码/external/sepolicy/adbd.te

```bash
allow adbd adb_device:chr_file rw_file_perms;
```
1. 其中adbd是一个关联了domain属性的名为adbd的主体type.主体是访问的发起者.

2. adb_device是客体type,也就是主体要访问的资源.

Android源码/external/sepolicy/device.te

```bash
type adb_device, dev_type;
```
可知adb_device关联了dev_type属性.

Android源码/external/sepolicy/attributes

```bash
# All types used for devices.
attribute dev_type;
```
3. chr_file指的是客体所属的类型class object.知道了所属类型后,那么就可以根据前面的介绍,从access_vectors得知相关的许可操作了.

4. 有时候只是想要object class默认的许可中的某些许可,rw_file_perms就是这个作用,只是想要chr_file中众多许可中与可读可写相关的许可.

```bash
class chr_file
inherits file
{
    execute_no_trans
    entrypoint
    execmod
    open
    audit_access
}
```

说明chr_file继承自file,也就是说file所具有的许可,他都继承了.

rw_file_perms实际上是个宏,定义在global_macros中:

```bash
define(`rw_file_perms', `{ r_file_perms w_file_perms }')
define(`r_file_perms', `{ getattr open read ioctl lock }')
define(`w_file_perms', `{ open append write }')
```

<font color="#ff5588">总的来说上面那个allow规则的含义是:允许安全上下文中type字段是adbd的主体访问安全上下文中type字段是adb_device的客体资源,对这些资源拥有读写权限.</font>

另外要注意的是客体也有可能是某个进程,主体也可能是某一文件,这些情况,不太多见,但也要知道.


####其他规则

dontaudit: 表示不记录某条违反规则的决策信息

auditallow: 默认情况下是SELinux只记录那些权限检查失败的操作。allowaudit则使得权限检查成功的操作也被记录。注意，allowaudit只是允许记录，它和赋予权限没关系。赋予权限必须且只能使用allow语句。

neverallow: 表示不允许主体对客体执行指定的操作.



[1]: http://7xj6ce.com1.z0.glb.clouddn.com/Android-seandroid-1-7.png
[2]: http://7xj6ce.com1.z0.glb.clouddn.com/Android-seandroid-2-2.png
[3]: http://7xj6ce.com1.z0.glb.clouddn.com/Android_SEandroid-2-3.PNG





















