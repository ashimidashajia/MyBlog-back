---
layout: post
title: Android 5.1 SEAndroid分析之打标签
categories: Android底层开发
tags: [Android核心服务]
date: 2015-10-01 23:21:29
---

现在已经对SEAndroid上下文以及它的语法有了简单了解了,而且也已经清楚了如何向内核模块加载策略文件,但是这些安全上下文如何使用呢?也就是说如何将这些上下文和主体客体绑定呢?接下来就来分析这个问题.

给主体客体绑定SEAndroid上下文,可以称为打标签.

<!--more-->

### SEAndroid 对rc文件的扩展

SEAndroid对rc文件的影响,主要体现在增加了五个关键字:

#### seclable

用来设置service的安全上下文
```bash
service ueventd /sbin/ueventd
    class core
    critical
    seclabel u:r:ueventd:s0
```

#### restorecon

恢复某个文件和文件夹安全上下文到最初设置的状态

```bash
on post-fs-data
    # We chown/chmod /data again so because mount is run as root + defaults
    chown system system /data
    chmod 0771 /data
    # We restorecon /data in case the userdata partition has been reset.
    restorecon /data
```

#### setcon

只用来设置init进程的安全上下文
```bash
on early-init
. . . . 
setcon u:r:init:s0
. . . .
```

#### setenforce

设置为enforcing模式


#### setsebool

设置一个policy boolean类型的值


后面连个在rc文件中不多见.

### init进程初始化安全上下文

init.c中main函数中的selinux_initialize函数调用selinux_init_all_handles()函数来装载文件和属性的安全上下文.


```c
struct selabel_handle *sehandle;
struct selabel_handle *sehandle_prop;

void selinux_init_all_handles(void)
{
    sehandle = selinux_android_file_context_handle();//装载所有文件的安全上下文
    selinux_android_set_sehandle(sehandle);//libselinux中也有一个sehandle,此函数就是给这个全局变量赋值
    sehandle_prop = selinux_android_prop_context_handle();//装载所有属性文件的安全上下文
}

```
Android源码/external/libselinux/src/label_internal.h
```c
struct selabel_handle {
    /* arguments that were passed to selabel_open */
    unsigned int backend;
    int validating;

    /* labeling operations */
    struct selabel_lookup_rec *(*func_lookup) (struct selabel_handle *h,
                           const char *key, int type);
    void (*func_close) (struct selabel_handle *h);
    void (*func_stats) (struct selabel_handle *h);
    bool (*func_partial_match) (struct selabel_handle *h, const char *key);
    struct selabel_lookup_rec *(*func_lookup_best_match) (struct selabel_handle *h,
                             const char *key,
                             const char **aliases,
                             int type);

    /* supports backend-specific state information */
    void *data;

    /* substitution support */
    struct selabel_sub *subs;
};
```


#### 文件打标签

与文件打标签相关的函数如下所示:
```c
struct selabel_handle* selinux_android_file_context_handle(void)
{
    return file_context_open();
}

```
文件的安全上下文记录在file_contexts中,该文件在手机中有以下两个位置:
```c
static const struct selinux_opt seopts[] = {
    { SELABEL_OPT_PATH, "/file_contexts" },
    { SELABEL_OPT_PATH, "/data/security/current/file_contexts" },
    { 0, NULL } };

static struct selabel_handle *file_context_open(void)
{
    struct selabel_handle *h;

    h = get_selabel_handle(seopts);//sepots是一个全局变量,定义如上所示

    if (!h)
        selinux_log(SELINUX_ERROR, "%s: Error getting file context handle (%s)\n",
                __FUNCTION__, strerror(errno));
    return h;
}
```

通过下面的函数,选择一个file_contexts文件,并加载,这样就初始化好了文件的安全上下文.

```c
static struct selabel_handle *get_selabel_handle(const struct selinux_opt opts[])
{
   . . .  
    set_policy_index();//该函数上一篇文章已经介绍了,用来设置数组索引的,即选择seopts[]数组中的哪一个元素
   . . .
    h = selabel_open(SELABEL_CTX_FILE, &opts[policy_index], 1);
    . . .
    fd = open(opts[policy_index].value, O_RDONLY | O_NOFOLLOW);
  . . . 
    map = mmap(NULL, sb.st_size, PROT_READ, MAP_PRIVATE, fd, 0);
   . . .  
    SHA_hash(map, sb.st_size, fc_digest);
    . . .
}
```
Android源码/external/sepolicy/file_contexts:

```bash
/           u:object_r:rootfs:s0

# Data files
/adb_keys       u:object_r:adb_keys_file:s0
/default\.prop      u:object_r:rootfs:s0
/fstab\..*      u:object_r:rootfs:s0
/init\..*       u:object_r:rootfs:s0
/res(/.*)?      u:object_r:rootfs:s0
/ueventd\..*        u:object_r:rootfs:s0

# Executables
/charger        u:object_r:rootfs:s0
/init           u:object_r:rootfs:s0
/sbin(/.*)?     u:object_r:rootfs:s0

# Empty directories
/lost\+found        u:object_r:rootfs:s0
/proc           u:object_r:rootfs:s0

# SELinux policy files
/file_contexts      u:object_r:rootfs:s0
/property_contexts  u:object_r:rootfs:s0
/seapp_contexts     u:object_r:rootfs:s0
/sepolicy       u:object_r:rootfs:s0

. . .
##########################
# Devices
#
/dev(/.*)?      u:object_r:device:s0
/dev/akm8973.*      u:object_r:sensors_device:s0

. . .
#############################
# System files
#
/system(/.*)?       u:object_r:system_file:s0
/system/bin/sh      --  u:object_r:shell_exec:s0

. . .

#############################
# Vendor files
#
/vendor(/.*)?       u:object_r:system_file:s0
/vendor/bin/gpsd    u:object_r:gpsd_exec:s0
#############################
# Data files
#
/data(/.*)?     u:object_r:system_data_file:s0
/data/.layout_version       u:object_r:install_data_file:s0

. . . 

# coredump directory for userdebug/eng devices
/cores(/.*)?                    u:object_r:coredump_file:s0

# Wallpaper file for other users
/data/system/users/[0-9]+/wallpaper     u:object_r:wallpaper_file:s0
#############################
# efs files
#
/efs(/.*)?      u:object_r:efs_file:s0
#############################
# Cache files
#
/cache(/.*)?        u:object_r:cache_file:s0

. . .

#############################
# sysfs files
#
/sys/devices/platform/nfc-power/nfc_power -- u:object_r:sysfs_nfc_power_writable:s0
/sys/devices/system/cpu(/.*)?    u:object_r:sysfs_devices_system_cpu:s0

. . . 

#############################
# asec containers
/mnt/asec(/.*)?             u:object_r:asec_apk_file:s0
/mnt/asec/[^/]+/[^/]+\.zip  u:object_r:asec_public_file:s0
/mnt/asec/[^/]+/lib(/.*)?   u:object_r:asec_public_file:s0
/data/app-asec(/.*)?        u:object_r:asec_image_file:s0
```

可以看到file_contexts中记录的就是android 系统中各个目录以及文件的安全上下文.

现在有个问题,就是加载file_contexts的时候,可能一些文件系统还没挂载呢,这时候需要利用restorecon函数将这些文件夹恢复到file_contexts中标记的安全上下文.

init.c中main函数:

```c
 selinux_initialize();
    /* These directories were necessarily created before initial policy load
     * and therefore need their security context restored to the proper value.
     * This must happen before /dev is populated by ueventd.
     */
    restorecon("/dev");
    restorecon("/dev/socket");
    restorecon("/dev/__properties__");
    restorecon_recursive("/sys");
```

上述是针对文件和文件夹设置安全上下文,还有一种情况就是针对文件系统设置标签,也就是设置安全上下文.

Android源码/external/sepolicy/中有两个文件
```bash
genfs_contexts
fs_use
```
是用来给文件系统设置安全上下文的,设置之后文件系统内的所有文件没有重新指定的话,都是这个安全上下文.

genfs_contexts主要是针对基于内存的文件系统打标签:
```bash
# Label inodes with the fs label.
genfscon rootfs / u:object_r:rootfs:s0
# proc labeling can be further refined (longest matching prefix).
genfscon proc / u:object_r:proc:s0
genfscon proc /net u:object_r:proc_net:s0

. . . 

```
fs_use是对实实在在的文件系统打标签

```bash
# Label inodes via getxattr.
fs_use_xattr yaffs2 u:object_r:labeledfs:s0;
fs_use_xattr jffs2 u:object_r:labeledfs:s0;
fs_use_xattr ext2 u:object_r:labeledfs:s0;
fs_use_xattr ext3 u:object_r:labeledfs:s0;
fs_use_xattr ext4 u:object_r:labeledfs:s0;

. . . 
```
对于这些问价系统,安全上下文是作为扩展属性存在的,可以通过getattr函数从inode中读取到文件的安全属性.

还有一点要注意,就是Android4.4之后make_ext4fs在制作system.img和userdata.img的时候也要指定file_contexts文件,用来初始化system和userdata分区下的文件的安全上下文.这在重打ROM包的时候要注意.



#### 属性打标签

```c
static const struct selinux_opt seopts_prop[] = {
        { SELABEL_OPT_PATH, "/property_contexts" },
        { SELABEL_OPT_PATH, "/data/security/current/property_contexts" },
        { 0, NULL }
};
struct selabel_handle* selinux_android_prop_context_handle(void)
{
    int policy_index = selinux_android_use_data_policy() ? 1 : 0;//判断选择利用哪一个属性策略文件,给属性打标签
    struct selabel_handle* sehandle = selabel_open(SELABEL_CTX_ANDROID_PROP,
                                                   &seopts_prop[policy_index], 1);
    if (!sehandle) {
        ERROR("SELinux:  Could not load property_contexts:  %s\n",
              strerror(errno));
        return NULL;
    }
    INFO("SELinux: Loaded property contexts from %s\n", seopts_prop[policy_index].value);
    return sehandle;
}
```

Android源码/external/sepolicy/property_contexts

```bash
##########################
# property service keys
#
#
net.rmnet               u:object_r:net_radio_prop:s0
net.gprs                u:object_r:net_radio_prop:s0
net.ppp                 u:object_r:net_radio_prop:s0
net.qmi                 u:object_r:net_radio_prop:s0

. . . . . 

```
因为ro.开头的属性是只读属性,不管谁都可以访问,因为无法修改其值,也就不会对系统造成影响.所以上述文件中没有对ro.的属性设定安全上下文.

对于那些非只读属性,那么就必须要设置安全上下文了,因为修改这些属性的值,一般情况下都会对系统造成一定的影响.



### 设置进程主体的安全上下文

Android系统中启动进程常用的两种方式:

1. 一种是通过init进程来启动,这些进程一般都是Android系统native层的核心服务,通常以守护进程的方式启动;

2. 另一种当然就是zygote来启动的应用App进程了.


#### 设置守护进程的安全上下文

这些守护进程通常都是指init进程中启动的rc文件中的service.前面文章也有介绍,service是如何启动的.service的安全上下文,肯定也是在它启动的时候设置的了.

```c
void service_start(struct service *svc, const char *dynamic_args)
{
    . . . .
      if (is_selinux_enabled() > 0) {
        if (svc->seclabel) {
            scon = strdup(svc->seclabel);//rc文件中利用seclable指定关键字的话,复制一份
            if (!scon) {
                ERROR("Out of memory while starting '%s'\n", svc->name);
                return;
            }
        } else {
            char *mycon = NULL, *fcon = NULL;
            . . . 
            rc = getcon(&mycon);//如果rc文件中没有为service设置安全上下文,就先获得当前进程,也就是init进程的安全上下文
            . . . 
            rc = getfilecon(svc->args[0], &fcon);//获得service对应的可执行程序文件的安全上下文
            . . . .
            /*传递给内核,有内核计算新的安全上下文*/
            rc = security_compute_create(mycon, fcon, string_to_security_class("process"), &scon);
            . . . .
            }
        }
}
```
如果rc文件中为service指定了安全上下文,那么就用指定的安全上下给service打标签.如果没有指定,那么就利用init进程的安全上下文和service对应的可执行程序文件的安全上下文,通过/sys/fs/selinux/create传递给内核.内核计算得到安全上下文之后,在通过create返回给用户空间.

其中getfilecon函数获取service可执行程序文件的安全上下文,就是利用前面说getxattr的获取扩展属性的方式得到的.

然后service_start函数中要利用setexeccon函数设置安全上下文,即给service打标签.


```c
   if (svc->seclabel) {
            if (is_selinux_enabled() > 0 && setexeccon(svc->seclabel) < 0) {
                ERROR("cannot setexeccon('%s'): %s\n", svc->seclabel, strerror(errno));
                _exit(127);
            }
        }
```
<font color="#ff5588">这里有个疑问,就是只有rc文件中service设置了安全上下文的话,才会调用上面的函数,而我们通过计算得到的安全上下文,似乎没有被设置啊!!!!!</font>


#### 设置应用App的安全上下文

App进程打标签,就比较复杂了.app进程是zygote进程fork出来的,但是没有调用exec.
    

Android源码/frameworks/base/core/jni/com_android_internal_os_Zygote.cpp

```c++
static jint com_android_internal_os_Zygote_nativeForkSystemServer(
        JNIEnv* env, jclass, uid_t uid, gid_t gid, jintArray gids,
        jint debug_flags, jobjectArray rlimits, jlong permittedCapabilities,
        jlong effectiveCapabilities) {

. . . . .
  pid_t pid = ForkAndSpecializeCommon(env, uid, gid, gids,
                                      debug_flags, rlimits,
                                      permittedCapabilities, effectiveCapabilities,
                                      MOUNT_EXTERNAL_NONE, NULL, NULL, true, NULL,
                                      NULL, NULL);
. . . . .

}
```
zygote进程必须以root身份运行,负责设置由他创建的子进程的DAC凭证,也就是UID,GID,GIDS,以及Capabilities.为了支持SEAndroid,还要设置其创建的子进程的安全上下文.

forkAndSpecializeCommon()内部其实会调用fork()，而后设置gid、uid等信息.还会设置子进程的Capabilities,以及安全上下文.

```c++
static pid_t ForkAndSpecializeCommon(JNIEnv* env, uid_t uid, gid_t gid, jintArray javaGids,
                                     jint debug_flags, jobjectArray javaRlimits,
                                     jlong permittedCapabilities, jlong effectiveCapabilities,
                                     jint mount_external,
                                     jstring java_se_info, jstring java_se_name,
                                     bool is_system_server, jintArray fdsToClose,
                                     jstring instructionSet, jstring dataDir) {
                . . . . .

                 SetCapabilities(env, permittedCapabilities, effectiveCapabilities);

                 SetSchedulerPolicy(env);  
                . . . . .
                  rc = selinux_android_setcontext(uid, is_system_server, se_info_c_str, se_name_c_str);
                . . . . .
}
```
是通过selinux_android_setcontext函数来设置安全上下文的.

注意该函数的参数含义.

```c++
int selinux_android_setcontext(uid_t uid,
                   int isSystemServer,
                   const char *seinfo,
                   const char *pkgname)
{
    char *orig_ctx_str = NULL, *ctx_str;
    context_t ctx = NULL;
    int rc = -1;

    if (is_selinux_enabled() <= 0)//检查是否开启SEAndroid
        return 0;

    rc = getcon(&ctx_str);//获取当前进程安全上下文,也就是继承自zygote进程的安全是上下文
    if (rc)
        goto err;

    ctx = context_new(ctx_str);//以ctx_str为模板创建一个新的安全上下文
    orig_ctx_str = ctx_str;
    if (!ctx)
        goto oom;

    /*在seapp_contexts[]中查找新的安全上下文*/
    rc = seapp_context_lookup(SEAPP_DOMAIN, uid, isSystemServer, seinfo, pkgname, NULL, ctx);
    if (rc == -1)
        goto err;
    else if (rc == -2)
        goto oom;

    ctx_str = context_str(ctx);//将上下文转换为字符串
    if (!ctx_str)
        goto oom;

    rc = security_check_context(ctx_str);//验证上下文的正确性.
    if (rc < 0)
        goto err;

    if (strcmp(ctx_str, orig_ctx_str)) {
        rc = setcon(ctx_str);//如果查询得到的安全上下文和之前创建的上下文不一致,那么就将查询得到的上下文给新创建的进程打标签
        if (rc < 0)
            goto err;
    }

    rc = 0;
. . . . . .
}
```
seapp_context_lookup函数中首先调用下面的函数初始化seapp_context_init:

```c
__selinux_once(once, seapp_context_init);
```

```c
static void seapp_context_init(void)
{
        selinux_android_seapp_context_reload();
}
```


```c
static char const * const seapp_contexts_file[] = {
    "/seapp_contexts",
    "/data/security/current/seapp_contexts",
    NULL };


int selinux_android_seapp_context_reload(void)
{
    . . . . 
    set_policy_index();//确定索引

    fp = fopen(seapp_contexts_file[policy_index], "r");

    . . . .
    余下的代码就是解析seapp_contexts文件内容,将其存在全局数组seapp_contexts[]中
    seapp_contexts = (struct seapp_context **) calloc(nspec, sizeof(struct seapp_context *));
    . . . .
}
```
seapp_contexts文件内容:
```bash
isSystemServer=true domain=system_server
user=system domain=system_app type=system_app_data_file
user=bluetooth domain=bluetooth type=bluetooth_data_file
user=nfc domain=nfc type=nfc_data_file
user=radio domain=radio type=radio_data_file
user=shared_relro domain=shared_relro
user=shell domain=shell type=shell_data_file
user=_isolated domain=isolated_app
user=_app seinfo=platform domain=platform_app type=app_data_file
user=_app domain=untrusted_app type=app_data_file
```
seapp_contexts文件的作用是定义用户名和domain之间的关系.文件中的注释也大概说了他的一些使用规则.

该文件会根据输入的内容,找到匹配项,输出type.也就是进程domain和文件type.

其中systemserver很特殊,不是根据用户名,而是isSystemServer布尔值来判断的,systemserver有固定的上下文:

```bash
u:r:system:s0
```

第2,3,4,5,6行中的user都在

Android源码/system/core/include/private/android_filesystem_config.h 中android_ids数组中定义了.
```c
struct android_id_info {
    const char *name;
    unsigned aid;
};
static const struct android_id_info android_ids[] = {
    { "root",          AID_ROOT, },

    { "system",        AID_SYSTEM, },

    { "radio",         AID_RADIO, },
    { "bluetooth",     AID_BLUETOOTH, },
    { "graphics",      AID_GRAPHICS, },
    { "input",         AID_INPUT, },
    { "audio",         AID_AUDIO, },
    { "camera",        AID_CAMERA, },
    { "log",           AID_LOG, },
    { "compass",       AID_COMPASS, },

. . . . . . . 
```
可以根据aid得到name ,在由name查询seapp_contexts得到domain和文件type.


针对第6行user=_isolated:

同样在Android源码/system/core/include/private/android_filesystem_config.h

```c
#define AID_ISOLATED_START 99000 /* start of uids for fully isolated sandboxed processes */
#define AID_ISOLATED_END   99999 /* end of uids for fully isolated sandboxed processes */
```

因此可以根据useid,就能判断其name是否是_isolated,然后就可以得到domain和文件type.


第7,8行因为user都为_app,所以就不能仅仅通过user查询了.所以又加了一个seinfo.

因为Android系统自身包含的用户userid都是小于10000.所以大于10000的都是App用户.

这个seinfo怎么来的呢?

Andorid源码/external/sepolicy/mac_permission.xml:

```xml
<policy>

    <!-- Platform dev key in AOSP -->
    <signer signature="@PLATFORM" >
      <seinfo value="platform" />
    </signer>

    <!-- All other keys -->
    <default>
      <seinfo value="default" />
    </default>

</policy>
```

如果App是在Android源码编译环境下,Android.mk中指定了LOCAL_CERTIFICATE : = platform的话 seinfo为platform.系统自带核心应用都是这个值了.

LOCAL_CERTIFICATE可以取值:platform,shared,media.seinfo的值与其相同.不设置的话,为默认值default.


第三方APK的话,通常seinfo值为default.

在Android系统:/data/system/packages.list

```
com.android.providers.telephony 1001 0 /data/data/com.android.providers.telephony platform 1028,1015,3002,3001,3003
com.android.providers.calendar 10002 0 /data/data/com.android.providers.calendar default 3003,1028,1015
com.android.providers.media 10006 0 /data/data/com.android.providers.media default 1028,1015,1023,1024,2001,3003,3007
com.android.wallpapercropper 10018 0 /data/data/com.android.wallpapercropper platform none

 . . . . . .
```

其中每一行中的第6个字段就为这个App的seinfo值.

现在已经直到如何根据seapp_contexts文件中的内容为App打标签了.

继续前面代码的分析.


seapp_context_lookup中的seapp_context_init函数就是加载seapp_contexts文件内容到一个全局的seapp_contexts[]数组中,方便查询.


```c
static int seapp_context_lookup(enum seapp_kind kind,
                uid_t uid,
                int isSystemServer,
                const char *seinfo,
                const char *pkgname,
                const char *path,
                context_t ctx)
{

. . . .
__selinux_once(once, seapp_context_init);

userid = uid / AID_USER;
    appid = uid % AID_USER;
    if (appid < AID_APP) {//AID=10000,小于10000的话,前面说了都是Android系统定义的用户
        for (n = 0; n < android_id_count; n++) {
            if (android_ids[n].aid == appid) {
                username = android_ids[n].name;
                break;
            }
        }
        if (!username)
            goto err;
    } else if (appid < AID_ISOLATED_START) {//大于10000小于99000都是普通App用户
        username = "_app";
        appid -= AID_APP;
    } else {//99000和99999之间的的都是isolated
        username = "_isolated";
        appid -= AID_ISOLATED_START;
    }
. . . . .. . 
接下来就是以上面得到的username和以参数形式传递的进来的seinfo在seapp_contexts数组中查找其合适的进程domain和其文件type了.
for (i = 0; i < nspec; i++) {
        cur = seapp_contexts[i];
. . . . . 
}
}

```

总的来说zygote给子进程设置安全上下文是先根据子进程的userid得到其username.然后利用MMAC机制得到seinfo.通过username和seinfo就可以查询seapp_contexts得出该给子进程设置什么安全上下文了.



### 策略文件

Android系统中策略文件分散的位置:根目录下和/data/security/current.

sepolicy是二进制文件,是给linux内核使用的.

file_contexts 是用来给文件和文件夹打标签的.

property_contexts是用来给属性打标签的.

seapp_contexts和/system/etc/security/mac_permissions.xml是给app打标签的.

至于选择策略文件来自这两个目录中的哪一个,是根据这两个目录下的selinux_version文件的内容决定的,如果内容一致,那么选择data下的策略文件,否则选择根目录下的策略文件.


