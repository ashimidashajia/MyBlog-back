---
layout: post
title: 版本控制系统Git的介绍与简单使用
categories: 项目管理
tags: [代码管理]
date: 2015-10-04 18:29:54
---

### 简介

Git作者——Linux教父Linus Torvalds。Git有以下特点：

#### 1. git是一个分布式的版本控制系统

a. 客户端并不只提取最新版本的文件快照，而是把代码仓库完整地镜像下来，相当于备份了一份。

b. 任何一处协同工作用的服务器发生故障，事后都可以用任何一个镜像出来的本地仓库恢复

<!--more-->

#### 2. 直接记录快照，而非差异比较

a. 每一个git仓库可以理解为一个小型文件系统，包含四种对象：

| 对象        | 含义           |
| --------    |:----:          |
| blob        |   每个blob代表一个（版本的）文件，blob只包含文件的数据，而忽略文件的其他元数据，如名字、路径、格式等  |
| tree        |   每个tree代表了一个目录的信息，包含了此目录下的blobs，子目录（对应于子trees），文件名、路径等元数据。因此，对于有子目录的目录，git相当于存储了嵌套的trees。  |
| commit      |   每个commit记录了提交一个更新的所有元数据，如指向的tree，父commit，作者、提交者、提交日期、提交日志等。每次提交都指向一个tree对象，记录了当次提交时的目录信息。一个commit可以有多个（至少一个）父commits。 |
| tag         |   tag用于给某个上述类型的对象指配一个便于开发者记忆的名字, 通常用于某次commit。 |


b. Git 只关心文件数据的整体是否发生变化，不关心文件内容的具体差异

其他版本控制系统，例如SVN等，是以增量的方式来记录某个文件的变化的。比如某文件发生变化，SVN会记录差异部分。而git呢，不关心内容的差异，只要文件内容发生变化，那么就拷贝一份新的，即创建一个新的blob对象。

![][1]

这样的好处是处理速度会快，相当于以空间换时间。

c. 每次提交都产生一个快照

如何理解快照？

通俗的说就是记录提交时，仓库中所有文件对应的此时的blob和文件夹对应的此时tree的状态。新产生的快照是在上一个快照基础上生成的.

![][2]

git会把出现变更的文件直接拷贝，形成新的blob，而非与上一个版本的差异增量

所以一旦需要查看某版本直接load即可，而其他差异版本控制需要做合并

并非每个当前版本都需要做备份，如果没有改变，那么快照其实是链接上一个版本

git会在隐藏目录.git里存在object里，定期会优化，保证快照空间，和读取时间的平衡

#### 3.几乎所有的操作都可以在本地完成

只有涉及和远程服务器上的仓库操作，才需要网络支持。


### 使用Git的前期准备

#### 安装git

```bash
sudo apt-get install git-core
```
此种方法安装最简单，虽然版本可能稍低一些，但基本够用。想安装最新版本的话，可以下载源码编译安装。

#### Git的配置文件

查看当前配置 
```
git config --list
```

git的配置文件根据作用范围的不同，分三种：

1. 系统全局配置，影响到系统上的所有用户，位于 /etc/gitconfig，修改全局配置，git config --system

2. 用户配置，影响到单个用户，位于 ~/.gitconfig，修改用户配置: git config --global

3. 仓库配置，影响到当前的仓库，位于git仓库根目录下.gitconfig ， 修改仓库配置：git config


##### 必须的配置项

其中username和email是必须要设置的，因为提交的时候会用到。如下是配置对当前系统用户有效：

```bash
 git config --global user.name XXX
 git config --global user.email XXX
```

##### 指定外部的合并与比较工具

推荐使用meld,首先安装
```
sudo apt-get install meld
```
增加meld对git比较工具的调用支持：

```bash
sudo vim /usr/bin/git-meld.sh
```
内容如下:

```bash
#!/bin/sh
meld $2 $5
```
添加可执行权限
```bash
sudo chmod +x /usr/bin/git-meld.sh
```

配置：

```bash
git config --global merge.tool meld
git config --global diff.external /usr/bin/git-meld.sh
```

#### 格式化

此设置可以忽略，设置的话，在windows平台对中文支持可能有影响，未测试。

CRLF 是 Carriage-Return Line-Feed 回车换行

LF 是 line feed 的缩写，中文意思是换行。


linux用户：
```bash
 git config --global core.autocrlf input
```
设置为input时，添加文件git仓库时，git把crlf变为lf。当有人拉取代码时，还是lf 方式。因此在 window操 作系统下，不要使用这个设置.


windows用户

```bash
git config --global core.autocrlf true

```
设置为 true，添加文件到git仓库时，gi 将其视为文本文件。他将把crlf变成lf，拉取代码时，进行反操作。


#### 设置别名

```bash
git config --global alias.st status
```
即设置st为status的别名。

通常都给log设置一个别名，配上其他选项，实现颜色丰富的log输出：

```
git config --global alias.lg log --color --graph --pretty=format:'%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)<%an>%Creset' --abbrev-commit
```
查看log的时候，输入 git lg可以看到如下效果：

![][3]


### Git的文件状态与工作区域

#### Git文件状态

已修改：已修改表示修改了某个文件，但还没有提交保存。

已暂存：已暂存表示把已修改的文件放在下次提交时要保存的清单中

已提交：已提交表示该文件已经被安全地保存在本地数据库中了


#### Git有三个工作区域：

#### 1. 版本库

.git目录就是本地仓库，用来保存元数据和对象数据库的地方。该目录非常重要，每次克隆镜像仓库的时候，实际拷贝的就是这个目录里面的数据

#### 2. 工作区域

从项目中取出某个版本的所有文件和文件夹，用以开始后续工作的叫做工作目录。

这些文件实际上都是从 Git仓库中的压缩对象数据库中提取出来的，接下来就可以在工作目录中对这些文件进行编辑。

#### 3. 暂存区域

指的是.git/index文件，记录了文件名、文件的状态信息（时间戳、文件长度等）等的文件索引的目录树。

Git对象库（.git/objects）中保存的是文件索引中所指定的文件实体。

index的内容是“包含文件索引”的目录树。但是文件的内容并没有在其中，而是在.git/objects中，文件索引建立了文件和对象库中对象实体之间的对应。

下图所示工作区、版本库、暂存区原理图

![][4]

图中左侧为工作区，右侧为版本库。在版本库中标记为 "index" 的区域是暂存区（stage, index），标记为 "master" 的是 master 分支所代表的目录树。

图中的 objects 标识的区域为 Git 的对象库，实际位于 ".git/objects" 目录下.

当对工作区修改（或新增）的文件执行 "git add" 命令时，暂存区的目录树被更新，同时工作区修改（或新增）的文件内容被写入到对象库中的一个新的对象中，而该对象的ID 被记录在暂存区的文件索引中。

当执行提交操作（git commit）时，暂存区的目录树写到版本库（对象库）中，master 分支会做相应的更新。即 master 指向的目录树就是提交时暂存区的目录树。

当执行 "git reset HEAD" 命令时，暂存区的目录树会被重写，被 master 分支指向的目录树所替换，但是工作区不受影响。

当执行 "git rm --cached <file>" 命令时，会直接从暂存区删除文件，工作区则不做出改变

当执行 "git checkout ." 或者 "git checkout -- <file>" 命令时，会用暂存区全部或指定的文件替换工作区的文件。这个操作很危险，会清除工作区中未添加到暂存区的改动。

当执行 "git checkout HEAD ." 或者 "git checkout HEAD <file>" 命令时，会用 HEAD 指向的 master 分支中的全部或者部分文件替换暂存区和以及工作区中的文件。这个命令也是极具危险性的，因为不但会清除工作区中未提交的改动，也会清除暂存区中未提交的改动。





### Git的常用命令


#### 初始化本地仓库

两种方法 git init或者git clone url [name],可以指定clone之后文件夹的名字。

.git目录：
```bash
├── branches        #分支信息
├── config          #项目配置信息
├── description     #项目描述信息
├── HEAD            #当前所处分支
├── hooks           #系统默认钩子脚本目录
├── index           #索引文件# 获取 tagxx 的源码, 加了 --prefix 的作用是在最终的 tagxx.tar 中加了一层文件夹 tagxx
├── objects         #仓库所有对象
└── refs            #标示项目里的每个分支指向了哪个提交
```


####  常用操作

```bash
git add files 把当前文件放入暂存区域。
git reset -- files 用来撤销最后一次git add files，你也可以用git reset 撤销所有暂存区域文件。
git checkout -- files 把文件从暂存区域复制到工作目录，用来丢弃本地修改。
git commit 给暂存区域生成快照并提交。
```

![][5]


#### 查看文件的差异：

```bash
git diff filename-- 比较工作区和暂存区之间不同

git diff HEAD filename --  比较工作区和HEAD之间差异,也可以是其他分支

git diff --cached filename -- 比较暂存区和HEAD之间的差异，也可以是其他分支
```
![][6]

#### 忽略跟踪某些文件

源码根目录添加.gitignore文件，可以过滤某些文件不被git所管理。
```bash
# 以'#' 开始的行，被视为注释.
# 忽略掉所有文件名是 foo.txt 的文件.
foo.txt
# 忽略所有生成的 html 文件,
*.html
# foo.html是手工维护的，所以例外.
!foo.html
#  忽略所有.o 和 .a文件.
*.[oa]
```
github上有一个开源项目：https://github.com/github/gitignore

是专门针对各种语言开发时，推荐的.gitignore文件。


#### 详解git commit相关命令

有时候我们提交完了才发现漏掉了几个文件没有加，或者提交信息写错了。想要撤消刚才的提交操作，可以使用 --amend 选项重新提交：

```bash
git commit --amend
```
此命令将使用当前的暂存区域快照提交。如果刚才提交完没有作任何改动，直接运行此命令的话，相当于有机会重新编辑提交说明，但将要提交的文件快照和之前的一样.启动文本编辑器后，会看到上次提交时的说明，编辑它确认没问题后保存退出，就会使用新的提交说明覆盖刚才失误的提交。

如果刚才提交时忘了暂存某些修改，可以先补上暂存操作，然后再运行 --amend 提交：

```bash
$ git commit -m 'initial commit'
$ git add forgotten_file
$ git commit --amend
```
上面的三条命令最终只是产生一个提交，第二个提交命令修正了第一个的提交内容。


当执行git commit命令时，暂存区的目录树会写入到版本库中，master分支会作相应更新。（暂存区->版本库）

git reset HEAD，暂存区的目录树被替换为HEAD指向的分支目录树，工作区不受影响。（版本库->暂存区）

git checkout . . 暂存区->工作区，工作区中未添加到暂存区的修改会丢失。

git checkout HEAD . 版本库->暂存区->工作区，工作区和暂存区中未提交的改动会丢失。

#### 详解git reset 命令

用法1：

```bash
git reset -- files 
```
用来撤销最后一次的git add files（因为每git add file一次，暂存区的文件都会被更改一次），你也可以用git reset 撤销所有暂存区域文件。 

用法2：
```bash
git reset --hard <commit> --- 执行123，即将master、暂存区、工作区全部重置
git reset --soft <commit> --- 只执行1，也就是指修改引用的指向，不修改暂存区、工作区
git reset --mixsd <commit>(git reset <commit>) --- 执行12
```

![][7]

#### 详解删除命令

删除所有未跟踪的文件：

```bash
git clean -nd #查看可以删除的文件
git clean -f #执行删除命令
```

git rm 与rm的区别：

git rm file 将工作区和暂存区的file删除，而rm至删除工作区中的文件，可以用checkout从暂存区恢复。


#### 详解 git stash

使用git的时候，我们往往使用branch解决任务切换问题，例如，我们往往会建一个自己的分支去修改和调试代码, 如果别人或者自己发现原有的分支上有个不得不修改的bug，我们往往会把完成一半的代码 commit提交到本地仓库，然后切换分支去修改bug，改好之后再切换回来。这样的话往往log上会有大量不必要的记录。其实如果我们不想提交完成一半或者不完善的代码，但是却不得不去修改一个紧急Bug，那么使用'git stash'就可以将你当前未提交到本地（和服务器）的代码推入到Git的栈中，这时候你的工作区间和上一次提交的内容是完全一样的，所以你可以放心的修 Bug，等到修完Bug，提交到服务器上后，再使用'git stash apply'将以前一半的工作应用回来。也许有的人会说，那我可不可以多次将未提交的代码压入到栈中？答案是可以的。当你多次使用'git stash'命令后，你的栈里将充满了未提交的代码，这时候你会对将哪个版本应用回来有些困惑，'git stash list'命令可以将当前的Git栈信息打印出来，你只需要将找到对应的版本号，例如使用'git stash apply stash@{1}'就可以将你指定版本号为stash@{1}的工作取出来，当你将所有的栈都应用回来的时候，可以使用'git stash clear'来将栈清空。

```bash
git stash save XXXX(info)
git stash list
git stash pop 弹出最近一次
git stash apply stash@{N} 弹出任一次
git stash clean 
```

#### 详解status命令

1. git status -s 参数，等同于--short，对git status的简化输出。

2. 查看工作区、暂存区和版本库的目录树的方式。

工作区：正常的ls命令即可。
暂存区：git ls-files -s
版本库：git ls-tree HEAD


#### 详解tag命令

Git 使用的标签有两种类型：轻量级的（lightweight）和含附注的（annotated）。

轻量级标签就像是个不会变化的分支，实际上它就是个指向特定提交对象的引用。

```bash
git tag v0.1
```


含附注标签，实际上是存储在仓库中的一个独立对象，它有自身的校验和信息，包含着标签的名字，电子邮件地址和日期，以及标签说明。一般我们都建议使用含附注型的标签，以便保留相关信息；当然，如果只是临时性加注标签，或者不需要旁注额外信息，用轻量级标签也没问题

```bash
git tag -a v0.2 -m 'my version 0.2'
```

查看与删除标签：

```bash
git show tagname
git tag -d tagname
```
#### 打包

打包源码:
```bash
git archive --format zip  --prefix="tt/" --output tt.zip v0.1# 获取v0.1 的源码, 加了 --prefix 的作用是在最终的 tt.zip 中加了一层文件夹tt
```
tag还可以是哈希值.  分支名.





[1]: http://7xj6ce.com1.z0.glb.clouddn.com/GitStudy-1.PNG
[2]: http://7xj6ce.com1.z0.glb.clouddn.com/GitStudy-2.PNG
[3]: http://7xj6ce.com1.z0.glb.clouddn.com/GitStudy-3.PNG
[4]: http://7xj6ce.com1.z0.glb.clouddn.com/GitStudy-4.PNG
[5]: http://7xj6ce.com1.z0.glb.clouddn.com/GitStudy-5.jpg
[6]: http://7xj6ce.com1.z0.glb.clouddn.com/GitStudy-6.PNG
[7]: http://7xj6ce.com1.z0.glb.clouddn.com/GitStudy-7.PNG







